counter = counter + 1
}
print(value[1])
pl=sum(results[1,]<value[1])/B
pr=sum(results[1,]>value[1])/B
p=2*min(pl,pr)
print(p)
print("Energy")
print(value[1])
pl=sum(results[1,]<value[1])/B
pr=sum(results[1,]>value[1])/B
p=2*min(pl,pr)
print(p)
print("Lemo")
print(value[2])
pl=sum(results[2,]<value[2])/B
pr=sum(results[2,]>value[2])/B
p=2*min(pl,pr)
print(p)
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(diff~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
pl
print(pl)
data = read.table("data/dogs.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(data$isofluorane)=contr.sum
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(isofluorane)=contr.sum
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(isofluorane)=contr.sum
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(data$residuals)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(pvcaov$residuals)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(pvcaov$residuals)
data['diff'] = data['after'] - data['before'] #absoulute
data['diff'] = data['after'] - data['before'] #absoulute
filters = c('energy', 'lemo')
B=1000
value = vector("numeric", 2)
results = matrix(0,2,B)
par(mfrow=c(2,1))
counter = 1
for (i in filters) {
filter = data['drink'] == i
get_mean_diff=function(x,y) {mean(x-y)}#might need to change this
result=numeric(B)
for (j in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[j]=get_mean_diff(new_data[,1],new_data[,2])
}
results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
hist(results[counter,])
counter = counter + 1
}
data = read.table("data/run.txt", header=TRUE)
par(mfrow=c(1,2))
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
boxplot(after~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance After")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
par(mfrow=c(2,2))
qqnorm(data[['before']])
qqnorm(data[['after']])
hist(data[['before']])
hist(data[['after']])
filters = c('energy', 'lemo')
B=1000
value = vector("numeric", 2)
results = matrix(0,2,B)
par(mfrow=c(2,1))
counter = 1
for (i in filters) {
filter = data['drink'] == i
get_mean_diff=function(x,y) {mean(x-y)}#might need to change this
result=numeric(B)
for (j in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[j]=get_mean_diff(new_data[,1],new_data[,2])
}
results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
hist(results[counter,])
counter = counter + 1
}
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(diff~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
t.test(data['diff'], data['drink'])
data
#use t-test
filter = data['drink'] == "energy"
t.test(data['before'][filter],data['after'][filter],paired=TRUE)
filter = data['drink'] == "lemo"
t.test(data['before'][filter],data['after'][filter],paired=TRUE)
diff <- data[,1]-data[,2]
diff
data[,1]
data
diff[1:12]
diff <- data[,1]-data[,2]
lemon_diff <- diff[1:12]
energy_diff <- diff[13:24]
energy_diff
diff <- data[,1]-data[,2]
lemon_diff <- diff[1:12]
energy_diff <- diff[13:24]
t.test(lemon_diff, energy_diff)
qqnorm(lemon_diff)
qqnorm(energy_diff)
qqnorm(lemon_diff)
qqnorm(energy_diff)
hist(lemon_diff)
hist(energy_diff)
t.test(lemon_diff, energy_diff)
par(mfrow=c(2,2))
qqnorm(lemon_diff)
qqnorm(energy_diff)
hist(lemon_diff)
hist(energy_diff)
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data = read.table("data/dogs.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data
attach(data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
#pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
#anova(pvcaov)
treats
attach(data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
pvcaov=lm(dog~treatment,data=data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
summary(pvcaov)
data
confint(pvcaov)
kruskal.test(dog,treatment,data=treats)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
#xtabs(yield~treat+blend,data=penicillin)
search_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
xtabs(yield~treat+blend,data=penicillin)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
xtabs(time~interface+skill,data=search_data)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
new_data = xtabs(time~interface+skill,data=search_data)
new_data
search_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=new_data)
search_data
new_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
anova(aovpen)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
"interface" + temp_data['interface']
temp_data=search_data
"interface" + temp_data['interface']
temp_data['interface'] = paste("interface", temp_data['interface'])
temp_data['interface']
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface']) #change to category
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
df_data
temp_data
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface'])
temp_data['interface']
temp_data = search_data
temp_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface']) #change to category
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
search_data
par(mfrow=c(1,2))
attach(search_data)
interaction.plot(skill,interface,yield)
par(mfrow=c(1,2))
attach(search_data)
interaction.plot(skill,interface,time)
interaction.plot(interface,skill,time)
par(mfrow=c(2,1))
attach(search_data)
interaction.plot(skill,interface,time)
interaction.plot(interface,skill,time)
qqnorm(residuals(aovpen))
plot(fitted(aovpen),residuals(aovpen))
par(mfrow=c(2,1))
qqnorm(residuals(aovpen))
plot(fitted(aovpen),residuals(aovpen))
par(mfrow=c(1,2))
qqnorm(residuals(aovpen))
plot(fitted(aovpen),residuals(aovpen))
friedman.test(time,interface,skill)
friedman.test(time,interface,skill)
aovpen=lm(time~interface,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
aovpen=lm(time~interface,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data
cream_data=read.table("data\\cream.txt", header=TRUE)
lm(acidity∼starter+batch+position, data=data)
cream_data=read.table("data\\cream.txt", header=TRUE)
lm(acidity∼starter+batch+position, data=cream_data)
cream_data=read.table("data\\cream.txt", header=TRUE)
starter+batch+position
cream_data=read.table("data\\cream.txt", header=TRUE)
starter+batch+position
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = as.factor(cream_data['position'])
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = factor(cream_data['position'])
factor(cream_data['position'])
factor(cream_data$position)
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = factor(cream_data$position)
cream_data['batch'] = factor(cream_data$batch)
cream_data['starter'] = factor(cream_data$starter)
lm(acidity∼starter+batch+position, data=cream_data)
cream_data
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = factor(cream_data$position)
cream_data['batch'] = factor(cream_data$batch)
cream_data['starter'] = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = factor(cream_data$position)
cream_data['batch'] = factor(cream_data$batch)
cream_data['starter'] = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data['position'] = factor(cream_data$position)
cream_data['batch'] = factor(cream_data$batch)
cream_data['starter'] = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
summary(model)
anova(model)
summary(model)
pvcmult=glht(pvcaov,linfct=mcp(starter)
pvcmult
library(multcomp)
library(lme4)
library(Rcmdr) #might remove
library(multcomp)
library(lme4)
summary(model)
pvcmult=glht(pvcaov,linfct=mcp(starter)
pvcmult
pvcmult=glht(pvcaov,linfct=mcp(starter))
pvcmult=glht(model,linfct=mcp(starter))
pvcaov=lm(acidity∼starter+batch+position)
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(resin="Tukey"))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(resin="Tukey"))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(starter))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(cream_data['starter']))
cream_data
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(cream_data$starter]))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(cream_data$starter))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(cream_data$starter = 1))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(starter = 1))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(starter == 1))
pvcaov=lm(acidity∼starter+batch+position, data=cream_data)
summary(pvcaov)
pvcmult=glht(pvcaov,linfct=mcp(resin == 1))
cream_data=read.table("data\\cream.txt", header=TRUE)
setwd("C:\Users\Kieran\Documents\College\EDDA\EDDA\assignment4")
setwd("C:\\Users\\Kieran\\Documents\\College\\EDDA\\EDDA\\assignment4")
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity~starter+batch+position, data=cream_data)
print(model)
print(summary(model))
nauseatable=read.table('nauseatable.txt', header=TRUE)
nauseatable=read.table('data\\nauseatable.txt', header=TRUE)
nausea=c()
medicin=c()
for(i in 1:nrow(nauseatable)){
for(j in 1:ncol(nauseatable)){
medicin=append(medicin, rep(row.names(nauseatable)[i], nauseatable[i,j]))
nausea=append(nausea, rep(j-1, nauseatable[i,j]))
}
}
nausea.frame=data.frame(nausea,medicin)
nauseatable
xtabs(~medicin+nausea)
print(nauseatable)
print(xtabs(~medicin+nausea))
attach(nausea.frame)
B=1000
tstar=pstar=numeric(B)
for (i in 1:B){
nausstar=sample(nausea) ## permuting the labels
tstar[i]=chisq.test(xtabs(~medicin+nausstar))[[1]]
}
myt=chisq.test(xtabs(~medicin+nausea))[[1]]
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
pr
nauseatable=read.table('data\\nauseatable.txt', header=TRUE)
nausea=c()
medicin=c()
for(i in 1:nrow(nauseatable)){
for(j in 1:ncol(nauseatable)){
medicin=append(medicin, rep(row.names(nauseatable)[i], nauseatable[i,j]))
nausea=append(nausea, rep(j-1, nauseatable[i,j]))
}
}
nausea.frame=data.frame(nausea,medicin)
print(nausea.frame)
chisq.test(xtabs(~medicin+nausea))[[3]]
expensescrime=read.table('data\\expensescrime.txt', header=TRUE)
### step-down model
summary(lm(expend~employ+lawyers+pop+bad+crime, data=expensescrime))
# delete crime
summary(lm(expend~employ+lawyers+pop+bad, data=expensescrime))
# delete pop
summary(lm(expend~employ+lawyers+bad, data=expensescrime))
# delete bad
summary(lm(expend~employ+lawyers, data=expensescrime))
# done
Sys.getenv("PATH")
par(mfrow=c(1,2))
attach(search_data)
interaction.plot(skill,interface,time)#draw line on graph
interaction.plot(interface,skill,time)
cow_data=read.table("data\\cow.txt", header=TRUE)
cow_data$id=factor(cow_data$id)
cow_data$per=factor(cow_data$per)
model=lm(milk~treatment+per+id,data=cow_data)
model
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity~starter+batch+position, data=cream_data)
print(model)
print(summary(model))
pvcmult=glht(model,linfct=mcp(starter="Tukey"))
library(multcomp)
library(lme4)
pvcmult=glht(model,linfct=mcp(starter="Tukey"))
summary(pvcmult)
summary(model)
