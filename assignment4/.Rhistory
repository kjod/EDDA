results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
hist(results[counter,])
counter = counter + 1
}
filters = c('energy', 'lemo')
B=1000
value = vector("numeric", 2)
results = matrix(0,2,B)
par(mfrow=c(1,2))
counter = 1
for (i in filters) {
filter = data['drink'] == i
print(i)
get_mean_diff=function(x,y) {mean(x-y)}#might need to change this
result=numeric(B)
for (j in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[j]=get_mean_diff(new_data[,1],new_data[,2])
}
results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
print(value[counter])
hist(results[counter,])
counter = counter + 1
}
print(value[1])
pl=sum(results[1,]<value[1])/B
pr=sum(results[1,]>value[1])/B
p=2*min(pl,pr)
print(p)
print("Energy")
print(value[1])
pl=sum(results[1,]<value[1])/B
pr=sum(results[1,]>value[1])/B
p=2*min(pl,pr)
print(p)
print("Lemo")
print(value[2])
pl=sum(results[2,]<value[2])/B
pr=sum(results[2,]>value[2])/B
p=2*min(pl,pr)
print(p)
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(diff~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
pl
print(pl)
data = read.table("data/dogs.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(data$isofluorane)=contr.sum
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(isofluorane)=contr.sum
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
contrasts(isofluorane)=contr.sum
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(data$residuals)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(pvcaov$residuals)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
qqnorm(pvcaov$residuals)
data['diff'] = data['after'] - data['before'] #absoulute
data['diff'] = data['after'] - data['before'] #absoulute
filters = c('energy', 'lemo')
B=1000
value = vector("numeric", 2)
results = matrix(0,2,B)
par(mfrow=c(2,1))
counter = 1
for (i in filters) {
filter = data['drink'] == i
get_mean_diff=function(x,y) {mean(x-y)}#might need to change this
result=numeric(B)
for (j in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[j]=get_mean_diff(new_data[,1],new_data[,2])
}
results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
hist(results[counter,])
counter = counter + 1
}
data = read.table("data/run.txt", header=TRUE)
par(mfrow=c(1,2))
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
boxplot(after~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance After")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
par(mfrow=c(2,2))
qqnorm(data[['before']])
qqnorm(data[['after']])
hist(data[['before']])
hist(data[['after']])
filters = c('energy', 'lemo')
B=1000
value = vector("numeric", 2)
results = matrix(0,2,B)
par(mfrow=c(2,1))
counter = 1
for (i in filters) {
filter = data['drink'] == i
get_mean_diff=function(x,y) {mean(x-y)}#might need to change this
result=numeric(B)
for (j in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[j]=get_mean_diff(new_data[,1],new_data[,2])
}
results[counter,] = result
value[counter] = get_mean_diff(data['before'][filter],data['after'][filter])
hist(results[counter,])
counter = counter + 1
}
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(diff~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
t.test(data['diff'], data['drink'])
data
#use t-test
filter = data['drink'] == "energy"
t.test(data['before'][filter],data['after'][filter],paired=TRUE)
filter = data['drink'] == "lemo"
t.test(data['before'][filter],data['after'][filter],paired=TRUE)
diff <- data[,1]-data[,2]
diff
data[,1]
data
diff[1:12]
diff <- data[,1]-data[,2]
lemon_diff <- diff[1:12]
energy_diff <- diff[13:24]
energy_diff
diff <- data[,1]-data[,2]
lemon_diff <- diff[1:12]
energy_diff <- diff[13:24]
t.test(lemon_diff, energy_diff)
qqnorm(lemon_diff)
qqnorm(energy_diff)
qqnorm(lemon_diff)
qqnorm(energy_diff)
hist(lemon_diff)
hist(energy_diff)
t.test(lemon_diff, energy_diff)
par(mfrow=c(2,2))
qqnorm(lemon_diff)
qqnorm(energy_diff)
hist(lemon_diff)
hist(energy_diff)
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data = read.table("data/dogs.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
data
attach(data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
#pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
#anova(pvcaov)
treats
attach(data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
pvcaov=lm(dog~treatment,data=data)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
summary(pvcaov)
data
confint(pvcaov)
kruskal.test(dog,treatment,data=treats)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
treats = data.frame(dog=as.vector(as.matrix(data)),treatment=factor(rep(1:3,each=10)))
attach(treats)
pvcaov=lm(dog~treatment,data=treats)
anova(pvcaov)
qqnorm(pvcaov$residuals)
library(multcomp)
install.packages("multcomp")
install.packages("lme4")
library(multcomp)
library(lme4)
bread_data=read.table("data\bread.txt",header=TRUE)
bread_data=read.table("data\bread.txt",header=TRUE)
setwd("C:\\Users\\Kieran\\Documents\\College\\EDDA\\EDDA\\assignment4")
bread_data=read.table("data\bread.txt",header=TRUE)
bread_data=read.table("data\\bread.txt",header=TRUE)
bread_data
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(telephone[,"hours"])
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data["hours"])
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data[,"hours"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
klm = scan("klm.txt")
par(mfrow=c(1,2))
hist(klm)
qqnorm(klm)
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data[,"hours"][bread_data['humidity'] == "dry"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data[,"hours"][bread_data['humidity'] == "wet"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data[,"hours"][bread_data['humidity'] == "wet"] && bread_data['environment'] == "cold"])
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data[,"hours"][bread_data$humidity == "wet" & bread_data$environment == "cold"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data[,"hours"])
hist(bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "cold"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm((bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "cold"])
hist(bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "cold"])
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "cold"])
hist(bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "cold"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data$hours[bread_data$humidity == "wet" & bread_data$environment == "dry"])
bread_data=read.table("data\\bread.txt", header=TRUE)
qqnorm(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
hist(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
#2w way anova
#rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
rapply(bread_data$environment,function(x)length(unique(x)))
rapply(bread_data['environment'],function(x)length(unique(x)))
unique(bread_data['environment'])
length(unique(bread_data['environment']))
nrow(unique(bread_data['environment']))
bread_data=read.table("data\\bread.txt", header=TRUE)
#qqnorm(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
#hist(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
#2 way anova
I=nrow(unique(bread_data['environment']))
J=nrow(unique(bread_data['hours']));
N=3 #number of tests per experiment
rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
bread_data=read.table("data\\bread.txt", header=TRUE)
#qqnorm(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
#hist(bread_data$hours[bread_data$humidity == "dry" & bread_data$environment == "cold"])
#2 way anova
I=nrow(unique(bread_data['environment']))
J=nrow(unique(bread_data['hours']));
N=3 #number of tests per experiment
randomization = rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
randomization
randomization[0]
randomization[1]
randomization[,1]
interaction.plot(dose, supp, len, fixed = TRUE)
interaction.plot(bread_data)
interaction.plot(bread_data$hours, bread_data$environment, 5, fixed = TRUE)
interaction.plot(bread_data$hours, bread_data$environment, lenght(bread_data$environment), fixed = TRUE)
interaction.plot(bread_data$hours, bread_data$environment, length(bread_data$environment), fixed = TRUE)
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Hours", ylab="Environment")
bread_data
par(mfrow=c(1,2))
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Hours", ylab="Environment")
boxplot(hours~humidity,data=bread_data, main="Plot of hours and humidity",
xlab="Hours", ylab="Humidity")
par(mfrow=c(2,2))
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Hours", ylab="Environment")
boxplot(hours~humidity,data=bread_data, main="Plot of hours and humidity",
xlab="Hours", ylab="Humidity")
interaction.plot(bread_data$environment,bread_data$humidity, bread_data$hours)
interaction.plot(bread_data$humidity,bread_data$environment, bread_data$hours)
par(mfrow=c(2,2))
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Hours", ylab="Environment")
boxplot(hours~humidity,data=bread_data, main="Plot of hours and humidity",
xlab="Hours", ylab="Humidity")
attach(bread_data)
interaction.plot(environment, humidity, hours)
interaction.plot(humidity, environment, hours)
par(mfrow=c(2,2))
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Environment", ylab="Hours")
boxplot(hours~humidity,data=bread_data, main="Plot of hours and humidity",
xlab="Humidity", ylab="Hours")
attach(bread_data)
interaction.plot(environment, humidity, hours)
interaction.plot(humidity, environment, hours)
as.factor(bread_data$environment)
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
anova(pvcaov)
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
print(anova(pvcaov))
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity,data=bread_data)
print(summary(pvcaov2))
print(confint(pvcaov2))
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
print(anova(pvcaov))
"""contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity,data=bread_data)
print(summary(pvcaov2))
print(confint(pvcaov2))"""
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity,data=bread_data)
print(summary(pvcaov2))
print(confint(pvcaov2))
print(confint(pvcaov2))
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
print(anova(pvcaov))
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity, data=bread_data)
print(summary(pvcaov2))
qqnorm(residuals(pvcaov2))
plot(fitted(pvcaov2),residuals(pvcaov2))
qqnorm(residuals(pvcaov2))
print(residuals(pvcaov2))
qqnorm(residuals(pvcaov2))
plot(fitted(pvcaov2),residuals(pvcaov2))
print(residuals(pvcaov2))
levene.test(hours ~ humidity*environment, data=bread_data)
library(multcomp)
library(lme4)
library(Rcmdr) #might remove
install.packages("Rcmdr")
levene.test(hours ~ humidity*environment, data=bread_data)
levene.test(hours ~ humidity*environment, data=bread_data)
cooksd <- cooks.distance(pvcaov2)
cooks.distance(pvcaov2)
print(residuals(pvcaov2))
print(residuals(pvcaov2)) # look for residuals that are outside std
influence_plot(pvcaov2)
print(residuals(pvcaov2)) # look for residuals that are outside std
influencePlot(pvcaov2)
library(car)
print(residuals(pvcaov2)) # look for residuals that are outside std
influencePlot(pvcaov2)
print(residuals(pvcaov2)) # look for residuals that are outside std
I=3; B=5; N=1
for (i in 1:B) print(sample(1:(N*I)))
I=3; B=5; N=15 # 15 students
for (i in 1:B) print(sample(1:(N*I)))
search_data=read.table("data\\bread.txt", header=TRUE)
search_data=read.table("data\\search.txt", header=TRUE)
search_data
search_data=read.table("data\\search.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(time~skill,data=search_data, main="Plot of time and skill",
xlab="Skill", ylab="Time")
boxplot(time~interface,data=search_data, main="Plot of time and interface",
xlab="Interface", ylab="Time")
attach(search_data)
interaction.plot(skill, interface, time)
interaction.plot(interface, skill, time)
search_data['skill']
search_data['skill'] = "skill" + search_data['skill']
apply(serach_data, 1, )
f = (function (x) paste("skill", x))
f
apply(serach_data, 1, f)
apply(search_data, 1, f)
apply(search_data['skill'], 1, f)
x = apply(search_data['skill'], 1, f)
x
f = (function (x) paste("skill.", x))
x = apply(search_data['skill'], 1, f)
x
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
x
x = apply(search_data['skill'], 1, f)
x
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
search_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
serach_data
search_data
f = (function (x, y) gsub(" ", "", paste(y, ".", x), fixed = TRUE))("skill")
f = (function (x, y) gsub(" ", "", paste(y, ".", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f(skill))
search_data['skill'] = apply(search_data['skill'], 1, f("skill"))
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))()
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))()
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))()
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
search_data
