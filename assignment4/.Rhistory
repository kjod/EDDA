attach(cow_data)
t.test(milk[treatment=="A"],milk[treatment=="B"],paired=TRUE)
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data=read.table("data\\bread.txt", header=TRUE)
I=nrow(unique(bread_data['environment']))
J=nrow(unique(bread_data['hours']));
N=3 #number of tests per experiment
randomization = rbind(rep(1:I,each=N*J),rep(1:J,N*I),sample(1:(N*I*J))) #randomization code
par(mfrow=c(2,2))
boxplot(hours~environment,data=bread_data, main="Plot of hours and environment",
xlab="Environment", ylab="Hours")
boxplot(hours~humidity,data=bread_data, main="Plot of hours and humidity",
xlab="Humidity", ylab="Hours")
attach(bread_data)
interaction.plot(environment, humidity, hours)
interaction.plot(humidity, environment, hours)
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
print(anova(pvcaov))
bread_data
summary(anova(pvcaov))
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment+humidity,data=bread_data)
print(anova(pvcaov))
summary(anova(pvcaov))
#Analysisof variance
#2 way alnova
bread_data$environment=as.factor(bread_data$environment)
bread_data$humidity=as.factor(bread_data$humidity)
pvcaov=lm(hours~environment*humidity,data=bread_data)
print(anova(pvcaov))
bread_data
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity, data=bread_data)
print(summary(pvcaov2))
summary(anova(pvcaov))
print(confint(pvcaov2))
bread_data
summary(anova(pvcaov))
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity, data=bread_data)
print(summary(pvcaov2))
print(confint(pvcaov2))
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment+humidity, data=bread_data)
print(summary(pvcaov2))
contrasts(bread_data$environment)=contr.sum
contrasts(bread_data$humidity)=contr.sum
pvcaov2=lm(hours~environment*humidity, data=bread_data)
print(summary(pvcaov2))
#print(confint(pvcaov2)) #not sure if needed
qqnorm(residuals(pvcaov2))
print(residuals(pvcaov2)) # look for residuals that are outside std
plot(fitted(pvcaov2),residuals(pvcaov2))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
bread_data
plot(fitted(pvcaov2),residuals(pvcaov2))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
ind <- seq(1, nrow(df), by=3)
ind <- seq(1, nrow(bread_data), by=3)
bread_data[ind, ]
bread_data[-ind, ]
l <- 1:1000
sum(l[l %% 3 == 0 | l %% 5 == 0])
c(1:len(bread_data))
c(1:length(bread_data))
c(1:length(bread_data['hours']))
c(1:length(bread_data$hours))
c(1:2)
c(1:2) + c(4:15)
cbind(c(1:2), c(4:15))
abind(c(1:2), c(4:15))
append(c(1:2), c(4:15))
append(c(1:2), c(4:15), c(17:18))
append(append(c(1:2), c(4:15)), c(17:18))
bread_data[append(append(c(1:2), c(4:15)), c(17:18))]
bread_data['hours'][append(append(c(1:2), c(4:15)), c(17:18))]
bread_data
bread_data['hours'][append(append(c(1:2), c(4:15)), c(17:18))]
bread_data$hours[append(append(c(1:2), c(4:15)), c(17:18))]
bread_data2['hours'] = bread_data$hours[append(append(c(1:2), c(4:15)), c(17:18))]
df <- data.frame(hours=as.factor(character()),
environment=character(),
humidity=character())
df <- data.frame(hours=int()),
environment=factor(),
humidity=factor())
df <- data.frame(hours=int(),
environment=factor(),
humidity=factor())
df <- data.frame(hours=float(),
environment=factor(),
humidity=factor())
df <- data.frame(hours=integer(),
environment=factor(),
humidity=factor())
df <- data.frame(hours=integer(),
environment=factor(),
humidity=factor())
df['hours'] = bread_data$hours[append(append(c(1:2), c(4:15)), c(17:18))]
bread_data2 = bread_data
bread_data2['hours'] = bread_data$hours[append(append(c(1:2), c(4:15)), c(17:18))]
bread_data2 = []
bread_data2[-1,]
bread_data2[append(append(c(1:2), c(4:15)), c(17:18)),]
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
plot(fitted(pvcaov),residuals(pvcaov))
#bread_data2 = bread_data1[append(append(c(1:2), c(4:15)), c(17:18)),]
#pvcaov=lm(hours~environment*humidity,data=bread_data2)
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data1[append(append(c(1:2), c(4:15)), c(17:18)),]
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:2), c(4:15)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:2), c(4:15)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:9), c(11:14)), c(16:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(2,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
qqnorm(residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
qqnorm(residuals(pvcaov))
qqnorm(residuals(pvcaov2))
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
#par(mfrow=c(1,2))
#qqnorm(residuals(pvcaov2))
qqnorm(residuals(pvcaov))
bread_data
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
print(residuals(pvcaov))
#plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
print(residuals(pvcaov))
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
round(cooks.distance(pvcaov2),2)
plot(i:6,cooks.distance(pvcaov2))
round(cooks.distance(pvcaov2),2)
plot(1:6,cooks.distance(pvcaov2))
round(cooks.distance(pvcaov2),2)
plot(1:18,cooks.distance(pvcaov2))
round(cooks.distance(pvcaov2),2)
plot(1:18,cooks.distance(pvcaov2))
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(8:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
#par(mfrow=c(1,2))
#qqnorm(residuals(pvcaov2))
qqnorm(residuals(pvcaov))
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:6), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
#par(mfrow=c(1,2))
#qqnorm(residuals(pvcaov2))
qqnorm(residuals(pvcaov))
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:4), c(6:6)), c(9:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
#par(mfrow=c(1,2))
#qqnorm(residuals(pvcaov2))
qqnorm(residuals(pvcaov))
par(mfrow=c(1,2))
plot(fitted(pvcaov2),residuals(pvcaov2))
#plot(fitted(pvcaov),residuals(pvcaov))
bread_data2 = bread_data[append(append(c(1:5), c(9:16)), c(17:18)),]
pvcaov=lm(hours~environment*humidity,data=bread_data2)
plot(fitted(pvcaov),residuals(pvcaov))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
#par(mfrow=c(1,2))
#qqnorm(residuals(pvcaov2))
qqnorm(residuals(pvcaov))
I=3; B=5; N=15 # 15 students
for (i in 1:B) print(sample(1:(N*I)))
search_data=read.table("data\\search.txt", header=TRUE)
par(mfrow=c(2,2))
boxplot(time~skill,data=search_data, main="Plot of time and skill",
xlab="Skill", ylab="Time")
boxplot(time~interface,data=search_data, main="Plot of time and interface",
xlab="Interface", ylab="Time")
attach(search_data)
interaction.plot(skill, interface, time)
interaction.plot(interface, skill, time)
search_data
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
f = (function (x) gsub(" ", "", paste("skill.", x), fixed = TRUE))
search_data['skill'] = apply(search_data['skill'], 1, f)
f = (function (x) gsub(" ", "", paste("interface.", x), fixed = TRUE))
search_data['interface'] = apply(search_data['interface'], 1, f)
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface']) #change to category
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
search_data['skill'] = search_data$skill=as.factor(search_data$skill)
search_data['interface'] = search_data$interface=as.factor(search_data$interface)
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface']) #change to category
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
search_data=read.table("data\\search.txt", header=TRUE)#need for reset
search_data['skill'] = search_data$skill=as.factor(search_data$skill)
search_data['interface'] = search_data$interface=as.factor(search_data$interface)
temp_data = search_data
temp_data['interface'] = paste("interface", temp_data['interface']) #change to category
new_data = xtabs(time~interface+skill,data=search_data)
aovpen=lm(time~interface+skill,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
par(mfrow=c(2,1))
attach(search_data)
interaction.plot(skill,interface,time)
interaction.plot(interface,skill,time)
par(mfrow=c(1,2))
qqnorm(residuals(aovpen))
plot(fitted(aovpen),residuals(aovpen))
round(cooks.distance(pvcaov2),2)
round(cooks.distance(aovpen),2)
plot(1:18,cooks.distance(aovpen))
plot(1:15,cooks.distance(aovpen))
search_data2 = search_data[append(append(c(1:5), c(7:13)), c(15:15)),]
aovpen2=lm(time~interface+skill,data=search_data)
plot(fitted(aovpen2),residuals(aovpen2))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
search_data2 = search_data[append(append(c(1:5), c(7:13)), c(15:15)),]
aovpen2=lm(time~interface+skill,data=search_data)
#plot(fitted(aovpen2),residuals(aovpen2))
qqnorm(residuals(aovpen2))
#print(anova(pvcaov))
#cooks.distance(pvcaov2)
#plot point on graph with cooks distance and levenes distance
#library(car)  influencePlot(pvcaov2)
friedman.test(time,interface,skill)
aovpen=lm(time~interface,data=search_data)
print(anova(aovpen))
print(summary(aovpen))
hist(search_data['hours'])
hist(search_data$hours)
search_data
hist(search_data$time)
hist(search_data$time[search_data['skill'] = 1])
hist(search_data$time[search_data['skill'] == 1])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
par(2,2)
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
par(2,2)
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
#hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
bead_data
search_data
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 2)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 3)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
#hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == '2') && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2]))
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2)])
#hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
search_data
par(mfrow=c(1,2))
hist(search_data$time[(search_data['skill'] == 1) && (search_data['interface'] == 1)])
#hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist((search_data['interface'] == 1)])
par(mfrow=c(1,2))
hist((search_data['interface'] == 1))
par(mfrow=c(1,2))
hist(search_data$time[(search_data['interface'] == 1)])
#hist(search_data$time[(search_data['skill'] == 2) && (search_data['interface'] == 1)])
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
print(summary(model))
cream_data
pvcmult=glht(model,linfct=mcp(starter="Tukey"))
summary(pvcmult)
summary(model)
confint(pvcmult)
cow_data=read.table("data\\cow.txt", header=TRUE)
cow_data$id=factor(cow_data$id)
cow_data$per=factor(cow_data$per)
model=lm(milk~treatment+per+id,data=cow_data)
summary(model)
cow_data
mixed_model=lmer(milk~treatment+order+per+(1|id),data=cow_data,REML=FALSE)
print(summary(mixed_model))
mixed_model2=lmer(milk~order+per+(1|id),data=cow_data,REML=FALSE)
anova(mixed_model2,mixed_model)
attach(cow_data)
t.test(milk[treatment=="A"],milk[treatment=="B"],paired=TRUE)
cow_data=read.table("data\\cow.txt", header=TRUE)
cow_data$id=factor(cow_data$id)
cow_data$per=factor(cow_data$per)
model=lm(milk~treatment+per+id,data=cow_data)
cow_data=read.table("data\\cow.txt", header=TRUE)
cow_data$id=factor(cow_data$id)
cow_data$per=factor(cow_data$per)
model=lm(milk~treatment+per+id,data=cow_data)
model
summary(model)
mixed_model=lmer(milk~treatment+order+per+(1|id),data=cow_data,REML=FALSE)
print(summary(mixed_model))
mixed_model2=lmer(milk~order+per+(1|id),data=cow_data,REML=FALSE)
anova(mixed_model2,mixed_model)
attach(cow_data)
t.test(milk[treatment=="A"],milk[treatment=="B"],paired=TRUE)
hist(milk[treatment=="A"])
par(mfrow=c(1,2))
hist(milk[treatment=="A"])
hist(milk[treatment=="B"])
cow_data
cream_data=read.table("data\\cream.txt", header=TRUE)
#starter+batch+position
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
print(summary(model))
cream_data
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
print(summary(model))
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
cream_data=read.table("data\\cream.txt", header=TRUE)
cream_data$position = factor(cream_data$position)
cream_data$batch = factor(cream_data$batch)
cream_data$starter = factor(cream_data$starter)
model = lm(acidity∼starter+batch+position, data=cream_data)
print(model)
print(summary(model))
