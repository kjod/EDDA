data = read.table("data/run.txt", header=TRUE)
summary(data)
data['before']
data['after']
data['drink']
data = read.table("data/run.txt", header=TRUE)
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
data = read.table("data/run.txt", header=TRUE)
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
data = read.table("data/run.txt", header=TRUE)
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
boxplot(after~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance After")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
data['before']
data['before'][data['drink'] == 'energy']
filter = data['drink'] == 'energy'
print("Energy")
print(t.test(data['before'][filter], data['after'][filter]))
filter = data['drink'] == 'lemo'
print("Lemo")
print(t.test(data['before'][filter], data['after'][filter]))
hist(data)
hist(data["before"][data['Drink'] == "energy"])
hist(data["before"][data['drink'] == "energy"])
hist(data["before"][data['drink'] == "loc"])
hist(data["before"][data['drink'] == "lemoc"])
hist(data["before"][data['drink'] == "lemo"])
hist(data["before"])
hist(data["before"])
hist(data["after"])
data["after"]
data["after"]
hist(data["after"])
as.numeric(data['after'])
as.numeric(data['before'])
as.numeric(unlist(data['after']))
hist(as.numeric(unlist(data['after'])))
hist(as.numeric(unlist(data['before'])))
hist(as.numeric(unlist(data['after'])))
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(treat) ## permuting the labels
tstar[i]=mystat(lm(plasma~treatstar))
}
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
filter = data['drink'] == 'lemo'
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
#print(t.test(data['before'][filter], data['after'][filter]))
#print("Lemo")
#print(t.test(data['before'][filter], data['after'][filter]))
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
filter = data['drink'] == 'lemo'
#print(t.test(data['before'][filter], data['after'][filter]))
#print("Lemo")
#print(t.test(data['before'][filter], data['after'][filter]))
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
print(pl))
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
print(pl)
filter = data['drink'] == 'lemo'
#print(t.test(data['before'][filter], data['after'][filter]))
#print("Lemo")
#print(t.test(data['before'][filter], data['after'][filter]))
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
print(pl)
filter = data['drink'] == 'lemo'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
print(pl)
filter = data['drink'] == 'lemo'
#print(t.test(data['before'][filter], data['after'][filter]))
#print("Lemo")
#print(t.test(data['before'][filter], data['after'][filter]))
qqnorm(age,main="Q-Q Plot Age")
qqnorm(length,main="Q-Q Plot Length")
cor.test(systolic,migration,method="spearman")
cor.test(age,migration,method="spearman")
cor.test(length,migration,method="spearman")
cor.test(wrist,migration,method="spearman")
cor.test(diastolic,migration,method="spearman")
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(data['after'][filter]) ## permuting the labels
tstar[i]=mystat(lm(data['before'][filter]~treatstar))
}
myt=mystat(lm(data['before'][filter]~data['after'][filter]))
print(myt)
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
print(pl)
filter = data['drink'] == 'lemo'
print("Energy")
filter = data['drink'] == 'energy'
print("Energy")
attach(data)
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B)
{
ashinastar=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
tstar[i]=mystat(data['before'][filter],data['after'][filter])
}
myt=mystat(data['before'][filter],data['after'][filter])
filter = data['drink'] == 'energy'
print("Energy")
mystat=function(x,y) {mean(x-y)}
B=1000
tstar=numeric(B)
for (i in 1:B)
{
ashinastar=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
tstar[i]=mystat(data['before'][filter],data['after'][filter])
}
myt=mystat(data['before'][filter],data['after'][filter])
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(data['before'][filter],data['after'][filter])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
pl=sum(result<value)/B
pr=sum(result>value)/B
p=2*min(pl,pr)
print(p)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(new_data['before'][filter],new_data['after'][filter])
}
value=get_mean_diff(new_data['before'][filter],new_data['after'][filter])#seperating value
print(value)
hist(result)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(new_data['before'][filter],new_data['after'][filter])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(new_data['before'],new_data['after'])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(new_data[,1],new_data[,2])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
pl=sum(result<value)/B
pr=sum(result>value)/B
p=2*min(pl,pr)
print(p)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
print("Dimensions ", dim(new_data))
result[i]=get_mean_diff(new_data[,1],new_data[,2])
pritn
}
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
print("Dimensions ", dim(new_data))
result[i]=get_mean_diff(new_data[,1],new_data[,2])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
pl=sum(result<value)/B
pr=sum(result>value)/B
p=2*min(pl,pr)
print(p)
filter = data['drink'] == 'energy'
print("Energy")
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
print("Dimensions ", )
print(dim(new_data))
result[i]=get_mean_diff(new_data[,1],new_data[,2])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
pl=sum(result<value)/B
pr=sum(result>value)/B
p=2*min(pl,pr)
print(p)
for i in ['engery', 'lemo'] {
for (i in ['engery', 'lemo']) {
filter = ['engery', 'lemo']
filters = ['engery', 'lemo']
filters = c('energy', 'lemo')
for (i in filters) {
filter = data['drink'] == i
print(i)
get_mean_diff=function(x,y) {mean(x-y)}
B=1000
result=numeric(B)
for (i in 1:B)
{
new_data=t(apply(cbind(data['before'][filter],data['after'][filter]),1,sample))
result[i]=get_mean_diff(new_data[,1],new_data[,2])
}
value=get_mean_diff(data['before'][filter],data['after'][filter])#seperating value
print(value)
hist(result)
pl=sum(result<value)/B
pr=sum(result>value)/B
p=2*min(pl,pr)
print(p)
}
data['diff'] = data['after'] - data['before']
data['diff']
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(data['diff']~treatstar))
}
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(data[['diff']]~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
pl
data['diff'] = data['after'] - data['before'] #absoulute
attach(data)
mystat=function(x) sum(residuals(x)^2)
B=1000
tstar=numeric(B)
for (i in 1:B)
{
treatstar=sample(drink) ## permuting the labels
tstar[i]=mystat(lm(diff~treatstar))
}
myt=mystat(lm(diff~drink))
hist(tstar)
myt
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
pl
data = read.table("data/dogs.txt", header=TRUE)
data
data = read.table("data/dogs.txt", header=TRUE)
boxplot(isofluorane,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data['isofluorane'],data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data['isofluorane'],data['halothane'],data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
data['halothane']
boxplot(data['isofluorane'],data=data, main="Anesthesia",
xlab="Anesthesia", ylab="")
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data['isofluorane'],data=data, main="Anesthesia",
xlab="Anesthesia", ylab="")
boxplot(data['halothane'],data=data, main="Anesthesia",
xlab="Anesthesia", ylab="")
boxplot(data['cyclopropane'],data=data, main="Anesthesia",
xlab="Anesthesia", ylab="")
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data['cyclopropane'],data=data)
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqPlot(data['isofluorane'], dist="norm")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqplot(data['isofluorane'], dist="norm")
qqnorm(length,main="Q-Q Plot Length")
qqnorm(length)
qqnorm(data['length'])
data = read.table("data/peruvians.txt", header=TRUE)
pairs(data[,-c(5,6,7)])
#labels = colnames(data)[-c(5,6,7)]
#counter = 1
#for(i in data[,-c(5,6,7)]) {
#  plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], #ylab="Migration", pch=19)
#  abline(lm(migration~i), col="red") # regression line (y~x)
#  counter = counter + 1
#}
qqnorm(data['length'])
qqnorm(data[['length']])
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqnorm(data['isofluorane'], title="norm")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqnorm(data[['isofluorane']], title="norm")
qqnorm(data['halothane'], dist="norm")
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
data = read.table("data/run.txt", header=TRUE)
boxplot(before~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance Before")
boxplot(after~drink,data=data, main="Energy Drink",
xlab="Engery Drink", ylab="Perfomance After")
#plot(i, migration, main=paste(labels[counter]," vs migration"), xlab=labels[counter], ylab="Migration", pch=19)
#abline(lm(migration~i), col="red") # regression line (y~x)
data
data = read.table("data/dogs.txt", header=TRUE)
boxplot(data,data=data)
qqnorm(data[['isofluorane']])
qqnorm(data[['halothane']])
qqnorm(data[['cyclopropane']])
#boxplot(after~drink,data=data, main="Energy Drink",
#  	xlab="Engery Drink", ylab="Perfomance After")
attach(data)
pvcaov=lm(isofluorane~halothane*cyclopropane,data=data)
anova(pvcaov)
attach(data)
kruskal.test(isofluorane,halothane, cyclopropane)
attach(data)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,halothane,cyclopropane)
kruskal.test(isofluorane,halothane)
kruskal.test(isofluorane,cyclopropane)
kruskal.test(cyclopropane,halothane)
cor.test(systolic,migration,method="spearman")
cor.test(diastolic,migration,method="spearman")
cor.test(weight,migration,method="spearman")
